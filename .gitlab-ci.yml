image: docker:19

services:
  - docker:dind

stages:
  - build
  - notification
  # - test
  - release
  - deploy

before_script:
  - docker version
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:
  stage: build
  only:
    - develop
  script:
    - docker pull $CI_REGISTRY_IMAGE:CI_COMMIT_REF_NAME || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:CI_COMMIT_REF_NAME --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

notification:
  stage: notification
  only:
    - develop
  script:
    - apk add --no-cache curl
    - |
      project_info="=== NOTIFICATION DEPLOY ===
      Project ID: $CI_PROJECT_ID
      Project name: $CI_PROJECT_NAME
      Project URL: $CI_PROJECT_URL
      Branch: $CI_COMMIT_REF_NAME
      Commit: $CI_COMMIT_SHA
      Author: $CI_COMMIT_AUTHOR
      Description: $CI_COMMIT_DESCRIPTION
      Message: $CI_COMMIT_MESSAGE"
    - curl -X POST "https://api.telegram.org/bot$TOKEN_TELE/sendMessage" -d "chat_id=$CHAT_ID&text=$project_info"

# .tests:
#   stage: test
#   before_script:
#     - apk add --no-cache py3-pip py3-setuptools python3 python3-dev libffi-dev openssl-dev gcc libc-dev make
#     - pip install docker-compose
#     - docker-compose version
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
#     - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest

# linting:
#   extends: .tests
#   script:
#     - docker-compose up -d
#     - sleep 15
#     - docker-compose exec -T app npm run lint

# jest:
#   extends: .tests
#   script:
#     - docker-compose up -d
#     - sleep 15
#     - docker-compose exec -T app npm run test
#   coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
#   artifacts:
#     paths:
#     - coverage/

release-tag:
  variables:
    GIT_STRATEGY: none
  stage: release
  # except:
  #   - master
  only:
    - develop
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

release-latest:
  variables:
    GIT_STRATEGY: none
  stage: release
  only:
    - master
  script:
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest

deploy-product:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  only:
    - master
  before_script:
    - apk update && apk add openssh-client bash
  script:
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd ${PATH_TO_PROJECT};
      docker compose down;
      docker pull ${CI_REGISTRY_IMAGE}:latest;
      docker compose up -d;
      docker image prune -f;
      docker system prune -a -f;"

deploy-develop:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  only:
    - develop
  before_script:
    - apk update && apk add openssh-client bash
  script:
    - eval $(ssh-agent -s)
    - bash -c 'ssh-add <(echo "$SSH_PRIVATE_KEY")'
    - mkdir -p ~/.ssh
    - ssh-keyscan -H $SSH_SERVER_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - >
      ssh $SSH_USER@$SSH_SERVER_IP
      "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY};
      cd ${PATH_TO_PROJECT};
      docker compose down;
      docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME};
      docker compose up -d;
      docker image prune -f;
      docker system prune -a -f;"
